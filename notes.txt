Introduction to NestJS
Comps with Express
    Nothing by default
    Barebones
    Dev in charge of setting up everything - like React
    Around for many years
    Express helps but require lots of config and effort
    Flexibility can present problems
NestJS
    Creates framework around node.js
    Focus on app instead of implementation details
    Out of box app architecture
    Scalable
    Loosley-coupled
    Testable
    Maintainable
How?
    It’s a layer above Node.JS
NestJS
    Doesn’t lock you in
    Can use plugins from others like Fastify, Express, etc
Nest can swap to use Fastify or Express if you want
Platform Agnosticism
    Express / Fastify
And types of apps
    Rest APIs
    MVC
    Microservices
    Web Sockets
    GraphQL
    Cron job
    CLI
Create REST API in this course!!

Nest CLI
    Help to generate, build run, bundle, add elements
    Kind of like the Angular CLI

In the code folder
Src
    Main.ts - main starting file for app -
    AppModule - root module, can contain other small modules
    Decorator - function that applies logic
    Decorators used extensively!
    Module decorator - controllers, providers
    Controller decorator - specific requests handled by application
    AppService provider - separate business logic with DI

Insomnia - postman vs insomnia

Error Method per 
    NotFoundException
    InternalException
    BadRequestException

Built in exception layer
    if you just throw or any throw the exception layer will always bubble up the exception
    will see error log [ExceptionsHandler] w/ error message

Modules are recommend to organize app
    should have multiple modules with capabilities
    Shopping Cart
        same app domain
        this is a perfect example for own feature module
    Encapsulate to module
    npx nest g module coffees
    4 main metadata properties for object parameter for @Module decorator
        controllers - api routes
        exports - providers for this module than are available to other modules
        imports - list other modules that this module required
        providers - list services that need to be instantiated via DI for this module

DTO - define shape and interface for our request/response bodies
    for our payload
    .dto - plain class naming convention as a best practice
    dto folder
    interface / dto / entities should be their own folder in own module
    dto - simple class that creates properties no logic
    mark the properties as readonly for immutability

Validate DTO
    DTO provide type safety
    but we need to make sure the data is validated
    need to validate the correctness of data
    should be automatic
    ValidationPipe
        provide validation rules for all client payload
        use anonation in dto
    To get setup using ValidationPipe
        1. main.ts - add app.useGlobalPipes(new ValidationPipe());
        2. add 2 packages
            npm i class-validator class-transformer

    ** - class-validator package - check the documentation!!

    @nestjs/mapped-types - helper library
    paritaltype - return turns all the properties of the type input
        being optional
        also inherits the validation rules via decoarator
        add additional validation of isOptional on the fly

ValidationPipe
    can filter out message that should not be received via whitelisting
    any properties not includes stripped away
    whiteList : true 
    why?
        user gives invalid properties, this will make sure unwanted
        properties or unwanted and removed!!
    we can also stop request, if non whitelist value are included
        this will return an error
        forbidNonWhitelisted: true

Containers
    Docker - build, run share apps in Containers
    containerization has become popular for dev process
    felxibile, lightwieght, portable (build local, deploy anywhere), loosely coupled
    running process with encapsulation features - isolated from host
    docker and docker compose
    docker compose use yaml for application services
    with single command can create, build and run and any app on any machine
    easy to share and setup in the cloud

    // start containers in detached / background mode
        docker-compose up -d

    // stop containers
        docker-compose down

Get DB setup
    npm i @nestjs/typeorm typeorm (either pg or mysql2)

TypeOrm automatically uses Repository pattern

Creating Relationships between entities

- 1 to 1 = Coffee => Coffee Details, onetoone decorator

- 1 to many = Coffee Brand - Coffee, onetomany decorator

- many to many = Coffe => Flavor, manytomany decorator

Relations are not eagerly loaded by default

Cascading Insert!

Both operations need to be successful
    need a transaction
    unit of work
    reliable way to do multiple tasks together
    use query runner class for full control
    events stuff should be in event module

Index
    lookup table used by db to speed up data retrieval
    common search is on name
    to speed up the search query we can put index on name
    complex: might want composite index for multiple columns
    definitely use when performance is critical

Migrations
    increment update with database and model while perserving data in db
    typeORM has CLI
    outside of nest - no depenecy injection
    Commands:
        npx typeorm migration:create -n CoffeeRefactor
        make some changes in code
        go to migration file created from previous command
        up - what change and How
        down - undo or rollback - if issue, need exit strategy
        before running migration, need to build nestjs code
            not only the nest code but the migration code as well!!
        npm run build
        npx typeorm migration:run - to run migration
        npx typeorm migration:revert - to revert latest migration

    CLI can generate automatically!!!

    - make code change - like adding a new column to entity
    - npm run build - to generate js code that typeORM cli will use
    - npx typeorm migration:generate -n SchemaSync
    - check file to make sure it look as expected
    - npm run build - again so migration.ts file convert to .js
    - npx typeorm migration:run

Dependency Injection
    - NestJS run time is an IOC container
    - ask for Dependency, nestjs retrieves object with dependencies
    - 1. in coffe service, declare class with @Injectable() tells nest to put into container
        marks as a provider
    - 2. in CoffeesController, we request our class in the constructor
        tells Nest to inject provider
    - 3. register service as provider in the module - coffess.module.ts
    - instantiated controller - are there any classes that need to be provided?
        looks up by the token, will create an instance and cache or return existing class
    - NEST does this during app bootstraping
    - transitive so resolved bottom up in the right order
    - don't need to manage dependency graph
    - listing providers: [CoffesService] is shorthand for this
        {
            provide: CoffeesService, // this is the token
            useClass: CoffeesService
        }

Module Encapsulation
    - NEST encapsulate providers in a module so impossible to use
         provider unless listed in module or export from another module
         that has been imported
    - exports provider is the Public API

Custom Providers
Example advanced use-cases where we might need Custom Providers:

1. Creating a custom instance of our provider instead of having Nest instantiate the class for us
2. Or let’s say we want to reuse an existing class in a second dependency
3. How about if we want to override a class with a mock version for testing
4. And lastly, what if we want to use a Strategy Pattern in which we can provide an abstract class and interchange the real implementation (or actual class that is to be used) based on different conditions

Provider token
    can be classname, string or constant

Using constructor dependency injection its assumed that provider
is class based

Singleton instance is safe

Provider might need request
- instance request tracking or multi-tenant

By default every provider is a singleton

Transient is not shared.. new instance per provider

Request - new instance of provider for each incoming request
     automatically garage collected
     Scope.REQUEST

     scopes bubble up so if service is request then controller scope is request

    can get request specific information - using Request scope can cause performance issues
        @Inject(REQUEST) private readonly request: Request
            can get request info from this parameter in a constructor

Config

- Development vs Staging vs Production
store in process env object
NEST gives NESTJSConfig

joi package can validate json objects against a schema - hmmm...
    @hapi/joi has been deprecated should use joi instead later

ConfigModule
- configService has get method to get config variables

custom config files can group setting together

SOLID PRINCIPLES
- keeping code organized, with app dev building blocks
- Exception filters
    - control flow, content of response for exceptions
- Pipes
    - tranformation - input to desire output
    - validation - if valid, let pass through pipe
- Interceptors
    - inspired by aspect
    - bind logic before/after execution
    - extend behavior
    - or override a method
        - like caching a response
- Guards
    - whether request meets condition, role, acl, authorization

Understanding Binding Techniques (scopes)
- Global
    - APP_PIPE token
    - validation pipe
- Controller
    @UsePipes() decorator
- Method
    @UsePipes() decorator
- Param (pipes only)
    when validation logic is on 1 parameter
    @Body(ValidationPipe)

Open API Specification
- operations
- input parameters
- responses
- authentication

NEST has dedicated module that can generate Open API spec

npm i @nestjs/swagger swagger-ui-express